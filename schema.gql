# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Available {
  online: Boolean
  time: DateTime
}

input ChangePasswordInputType {
  token: String!
  password: String!
}

type Channel {
  id: ID!
  name: String!
  users: [String!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type FilesType {
  files: [String!]!
}

type Guest {
  id: ID!
  firstName: String
  lastName: String
  channelId: String!
  email: String!
  avatar: String
  name: String!
  token: String
  count: Float
  channel: Channel!
}

input GuestInputType {
  email: String!
  firstname: String
  lastname: String
  avatar: String
}

type Message {
  id: ID!
  message: String!
  userId: String!
  channelId: String!
  date: DateTime!
  user: User
  channel: Channel!
}

input MessageInputType {
  text: String!
  channelId: String!
  userId: String!
}

type Mutation {
  fileUpload(file: Upload!): Boolean!
  changePassword(data: ChangePasswordInputType!): User
  forgotPassword(email: String!): Boolean!
  invalidateTokens: Boolean!
  register(userData: UserInputType!): User!
  login(loginData: UserLoginInput!): User
  setAvailable: Boolean!
  setUnavailable: Boolean!
  logout: Boolean!
  confirmUser(token: String!): Boolean!
  createChannel(name: String!): Channel!
  sendMessage(messageInput: MessageInputType!): Message!
  registerGuestOrLogin(guestInputType: GuestInputType!): Guest!
}

type Notification {
  """This is the Channel ID"""
  id: ID!
  message: String!
  date: DateTime!
  user: User
}

type Query {
  files: [String!]!
  test: String!
  me: User
  AmIAuthorized: Boolean
  getAllUsers: [User!]!
  getAllChannels: [Channel!]!
  getAllMessages: [Message!]!
  getAllGuests: [Guest!]!
  guestMe: Guest
}

type Subscription {
  newChannelNotification: Notification!
  newMessageNotification: Notification!
  channelMessageNotification(channelId: ID!): Notification!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadType {
  stream: Boolean!
  createReadStream: Boolean!
  filename: String!
  mimetype: String!
  encoding: String!
}

type User {
  id: ID!
  firstName: String
  lastName: String
  admin: Boolean
  channels: [String!]
  available: Available!
  chatsCount: Float
  avatar: String
  maxChatsAtATime: Float
  isAvailable: Boolean!
  email: String!
  count: Float
  token: String
  confirmed: Boolean!
  name: String!
}

input UserInputType {
  email: String!
  password: String!
  firstname: String
  lastname: String
  avatar: String
}

input UserLoginInput {
  email: String!
  password: String!
}
